{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,qBADQ,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,OAKlB,SACG,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAlBkB,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,0FAC6EC,UAAUH,GADvF,sBAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGGA,EAAKC,OAHR,uBAGXC,EAHW,EAGXA,KACDC,EAAMD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAACQ,EAAIG,cAAL,aAAC,EAAYC,iBAAiBZ,QARvB,kBAWXM,GAXW,4CAAF,sDCEPO,EAAc,SAAC,GAAsB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAQV,EAAS,EAATA,IAErC,OACI,qBAAKc,UAAU,yCAAf,SACI,qBAAKC,IAAKf,EAAKgB,IAAKN,OCFnBO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECDX,SAACA,GAAa,IAAD,EACXd,mBAAS,CAC/BqB,KAAK,GACLa,SAAQ,IAHyB,mBAC9BC,EAD8B,KACvBC,EADuB,KAqBrC,OAfAC,qBAAU,WACVxB,EAAQC,GACHwB,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAS,CACLf,KAAKkB,EACLL,SAAQ,GACT,aAIZ,CAACpB,IAIGqB,EDlBwBM,CAAa3B,GAAhCa,EAFuB,EAE5BN,KAAaa,EAFe,EAEfA,QAGhB,OACI,qCACA,6BAAKpB,IACJoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEfpBiB,EAAe,WAAK,IAAD,EAEQ1C,mBAAS,CAAC,UAFlB,mBAErB2C,EAFqB,KAET5C,EAFS,KAS5B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACK4C,EAAWpB,KAAI,SAACT,GAAD,OAChB,cAAC,EAAD,CAASA,SAAUA,GAAeA,YCdlD8B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.ac78edb7.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState();\r\n    \r\n    const handleInputChange = (e)=>{\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2){\r\n            setCategories(cats=>[ inputValue,...cats]);\r\n            setInputValue(\" \");\r\n        }\r\n    };\r\n    \r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n           <input \r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            /> \r\n        </form>\r\n    );\r\n};\r\n\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}\r\n    ","export const getGifs= async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=bNVck3TPS6GMhembFd0anIQxFCu1jWmk&q=${encodeURI(category)}&limit=10`;\r\n    const resp = await fetch(url)\r\n    const {data} = await resp.json();\r\n    const gifs= data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url:img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title , url}) => {\r\n    // console.log(id, title , url);\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={url} alt={title}/>\r\n    \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGif';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n        return (\r\n            <>\r\n            <h3>{category}</h3>\r\n            {loading && <p className=\"nimate__animated animate__bounce\">Loading</p>}\r\n\r\n            <div className=\"card-grid\">\r\n                \r\n                    {\r\n                    images.map((img)=>(\r\n                        <GifGridItem \r\n                        key={img.id}\r\n                        {...img}\r\n                        />\r\n                        ))\r\n                    }\r\n            </div>\r\n            </>\r\n        );\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) =>{\r\n    const [state, setstate] = useState({\r\n        data:[],\r\n        loading:true\r\n    })\r\n    \r\n    useEffect(()=>{\r\n    getGifs(category)\r\n        .then(imgs=>{\r\n            setTimeout(()=>{\r\n                setstate({\r\n                    data:imgs,\r\n                    loading:false\r\n                }, 3000);\r\n            })\r\n        \r\n        });\r\n    }, [category]);\r\n\r\n\r\n\r\n    return state;\r\n\r\n}","import React, { useState } from 'react';\r\nimport {AddCategory} from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = ()=>{\r\n\r\n    const [categories, setCategories] = useState([\"Messi\"]);\r\n\r\n    // const handleAdd = () =>{    \r\n    //   setCategories([...categories, \"lsdoesfh\"]);\r\n    // }\r\n\r\n\r\n    return (\r\n        <>           \r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories}/>\r\n            <hr></hr>\r\n            <ol>\r\n                {categories.map((category)=>\r\n                <GifGrid category={category} key={category}\r\n                />\r\n                )\r\n                } \r\n            </ol>    \r\n        \r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {GifExpertApp} from './GifExpertApp';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}